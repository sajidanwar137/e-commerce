// REM mixin for width, height and size etc
@use "sass:math";
@function rem($pixels, $context: $font-size) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }
  //@return ($pixels / $context) * 1rem;
  @return math.div($pixels, $context) * 1rem;
}
// tint-color($secondary, 60%);
@function tint-color($color, $weight) {
  @return mix($white, $color, $weight);
}
//shade-color($secondary, 20%); 
@function shade-color($color, $weight) {
  @return mix($black, $color, $weight);
}

@mixin font-face-iconmoon($font-family, $font-path, $font-weight: normal, $font-style: normal) {
  @font-face {
    font-family: '#{$font-family}';
    src: url('#{$font-path}.eot');
    src: url('#{$font-path}.eot?#iefix') format('embedded-opentype'),
         url('#{$font-path}.woff') format('woff'),
         url('#{$font-path}.ttf') format('truetype'),
         url('#{$font-path}.svg##{$font-family}') format('svg');
    font-weight: $font-weight;
    font-style: $font-style;
    font-display: swap;
  }
}
@mixin font-face($family, $path, $font-weight: normal, $font-style: normal) {
  @font-face {
    font-family: #{$family};
    src: url('#{$path}.ttf') format('truetype');
    font-weight: $font-weight;
    font-style: $font-style;
    font-display: swap;
  }
}
//Border mixin
@mixin border($position) {
  &-#{$position} {
    @if $position == s {
        border-left: rem(1) solid var(--border-default);
    }
    @else if $position == e {
        border-right: rem(1) solid var(--border-default);
    }
    @else if $position == t {
        border-top: rem(1) solid var(--border-default);
    }
    @else if $position == b {
        border-bottom: rem(1) solid var(--border-default);
    }
  }
}
@mixin border-radius($position, $radius) {
  &-#{$position} {
    @if $position == top-left {
      border-top-left-radius: rem($radius);
    }
    @else if $position == top-right {
      border-top-right-radius: rem($radius);
    }
    @else if $position == bottom-left {
      border-bottom-left-radius: rem($radius);
    }
    @else if $position == bottom-right {
      border-bottom-right-radius: rem($radius);
    }
  }
}
//Text align mixin
@mixin text($position) {
  &-#{$position} {
    @if $position == start {
        text-align: left;
    }
    @else if $position == center {
      text-align: center;
    }
    @else if $position == end {
      text-align: right;
    }
  }
}
//Font weight mixin
@mixin fb($wieght) {
  &-#{$wieght} {
    @if $wieght == 100 {
      font-weight: 100;
    }
    @else if $wieght == 200 {
      font-weight: 200;
    }
    @else if $wieght == 300 {
      font-weight: 300;
    }
    @else if $wieght == 400 {
      font-weight: 400;
    }
    @else if $wieght == 500 {
      font-weight: 500;
    }
    @else if $wieght == 600 {
      font-weight: 600;
    }
    @else if $wieght == 700 {
      font-weight: 700;
    }
  }
}
// this mixin will work for single value property
//@include cssStyle('margin', rem(50), rem(30), rem(50), rem(65));
//@include cssStyle('margin-left', rem(50), rem(30), rem(50), rem(65));
@mixin cssStyle($property, $sm, $md, $lg, $xl) {
  @if $sm {
    #{$property}: rem($sm);
  }
  @if $md {
    @media (min-width: $screen-md) {
      #{$property}: rem($md);
    }
  }
  @if $lg {
    @media (min-width: $screen-lg) {
      #{$property}: rem($lg);
    }
  }
  @if $xl {
    @media (min-width: $screen-xl) {
      #{$property}: rem($xl);
    }
  }
}
// Use this mixin if you want to add multiple spacing values
//@include multi-spacing('margin', rem(50) 0, rem(30) 0, rem(50) 0, rem(65) 0);
@mixin multi-spacing($spacing, $sm, $md, $lg, $xl) {
  @if $sm {
    #{$spacing}: $sm;
  }
  @if $md {
    @media (min-width: $screen-md) {
      #{$spacing}: $md;
    }
  }
  @if $lg {
    @media (min-width: $screen-lg) {
      #{$spacing}: $lg;
    }
  }
  @if $xl {
    @media (min-width: $screen-xl) {
      #{$spacing}: $xl;
    }
  }
}
// this mixin will work for ellepsis, For ex: @include text-flow(2);
@mixin text-flow($n){
  display: -webkit-box;
  -webkit-line-clamp: $n;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
}
//--------------------------------------------------
//if top and bottom padding @include container-padding();
//if only top padding @include container-padding(false);
@mixin container-padding($bottom: true, $xl: 65, $lg: 50, $md: 40, $sm: 30){
  padding-top: rem($sm);
  @media (min-width: $screen-md) {
    padding-top: rem($md);
  }
  @media (min-width: $screen-lg) {
    padding-top: rem($lg);
  }
  @media (min-width: $screen-xl) {
    padding-top: rem($xl);
  }
  @if $bottom {
    padding-bottom: rem($sm);
    @media (min-width: $screen-md) {
      padding-bottom: rem($md);
    }
    @media (min-width: $screen-lg) {
      padding-bottom: rem($lg);
    }
    @media (min-width: $screen-xl) {
      padding-bottom: rem($xl);
    }
  }
}
//For screen reader
@mixin sr-only {
  border: 0;
  clip: rect(0, 0, 0, 0);
  height: rem(1);
  margin: rem(-1);
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: rem(1);
}
@mixin sr-only-focusable {
  &:active,
  &:focus {
    clip: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    position: static;
    width: auto;
  }
}
//For iconmoon font
@mixin dciconmoonStyle {
  font-family: $iconmoon-family !important;
  speak: never;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
  display: inline-flex;
  align-items: center;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}